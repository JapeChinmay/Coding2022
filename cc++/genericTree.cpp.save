#include<iostream>
#include<vector>
#include<queue>

using namespace std;


template<typename T>
class treeNode {


public:
    T data;
    vector<treeNode*> children;
    /////////////////
    ////properties




    ////////////////////////////////////////////////
    ////// constructor

     treeNode(T data) {

         this->data = data;


      }


};


 //////////////////////////////////////////////////////////////////////////


   treeNode<int>*takeInput() {


          int rootD;
          cout << "Enter the root data" << endl;
          cin >> rootD;
          treeNode<int>*root =  new treeNode<int>(rootD);

          int n;
          cout << " Enter the no of children" << endl;
          cin >> n;

          for(int i =0;i<n;i++) {

               treeNode<int>* child = takeInput();
               root->children.push_back(child);


          }

          return root;

   }
////////////////////////////////////////////////////////////////////////////////

  treeNode<int>* takeInputLevelWise() {

      int rootD;
      cout << "Enter Root Data" << endl;
      cin >> rootD;

      treeNode<int>* root = new treeNode<int>(rootD);
      queue<treeNode<int>*> pendingNodes;

      pendingNodes.push(root);


      while(pendingNodes.size() != 0) {

      treeNode<int>* front = pendingNodes.front();
      pendingNodes.pop();

         cout << " Enter the NO of children for " << " " << front->data << endl;
         int n;
         cin >> n;
         for(int i=1;i<=n;i++) {
              int childD;
              cout << "Enter the data for" << " " << i << "nTH" << " " << "child" << endl;
              cin >> childD;
              treeNode<int>*child = new treeNode<int>(childD);
              front->children.push_back(child);
              pendingNodes.push(child);


         }
      }

      return root;




   }

   /////////////////////////////////////////////////////////////////////////

   void printTree(treeNode<int>* root) {

          cout << root->data << endl;

          for(int i=0;i<root->children.size();i++) {

                    printTree(root->children[i]);
          }
    }

    //////////////////////////////////////////////////////////////////////////////////

    void printTree2(treeNode<int>* root){

           cout << root->data << ":";

           for(int i=0;i<root->children.size();i++) {

                cout << root->children[i]->data << "," << " " ;

           } cout << endl;


           for(int i =0; i<root->children.size();i++) {

              printTree2(root->children[i]);


           }
       }
///////////////////////////////////////////////////////////////////////////


       int totalNodes(treeNode<int>* root) {

             int ans = 1;
             for(int i=0;i<root->children.size();i++) {

                  ans += totalNodes(root->children[i]);
                //cout << "ANS is" << " " << ans << endl;
             }
             return ans;
       }


///////////////////////////////////////////////////////////////////////////////////////////////////////


            /// find depth ////


            void printLevelK(treeNode<int>* root,int k) {

                     if(k==0) {
                         cout << "ROOT DATA" << endl;

                         cout << root->data <<  " ";

                         return;


                     }

                     for(int i = 0;i<root->children.size();i++) {
                           printLevelK(root->children[i],k-1);
                     }


               }


    /////////////////////////////////////////////////////////


    void preOrder(treeNode<int>* root)  {

         cout<< root->data << " ";
         for(int i=0;i < root->children.size();i++) {

                preOrder(root->children[i]);

         }
     }
     
     
     //////
     
     void postOrder(treeNode<int>* root) {
      
          )
      }






















int main() {

    /*treeNode<int>* root= new treeNode<int>(12);
    treeNode<int>* node2 = new treeNode<int>(1221);
    treeNode<int>* node3 = new treeNode<int>(3434);


    root->children.push_back(node2);
    root->children.push_back(node3);
    */


    treeNode<int>* root = takeInputLevelWise();
    //printLevelK(root,4);

    preOrder(root);


















  }
